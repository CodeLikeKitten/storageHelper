import os
import logging
from typing import Optional, Dict
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from database import StorageDB

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
db = StorageDB()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ---
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class NewItemStates(StatesGroup):
    CHOOSE_TYPE = State()
    INPUT_EQUIPMENT = State()
    INPUT_COMPONENT = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def format_item_info(item_type: str, item: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏"""
    base = (
        f"–¢–∏–ø: {item_type}\n"
        f"ID: {item['id']}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item['–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']}"
    )
    
    if item_type == "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ":
        return f"{base}\n–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {item['—Ç–∏–ø']}"
    else:
        return (
            f"{base}\n"
            f"–†–∞–∑–º–µ—Ä:{item['—Ä–∞–∑–º–µ—Ä']}\n"
            f"–¢–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {item['—Ç–∏–ø']}"
        )

def create_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∑–∏—Ü–∏–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üõ† –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", callback_data="equipment")
    builder.button(text="üî© –ö–æ–º–ø–æ–Ω–µ–Ω—Ç", callback_data="component")
    builder.adjust(1)
    return builder.as_markup()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üè≠ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/search [ID –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ] - –ü–æ–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏\n"
        "/add [—Ç–∏–ø] [ID] [–∫–æ–ª-–≤–æ] - –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "/give [—Ç–∏–ø] [ID] [–∫–æ–ª-–≤–æ] - –í–∑—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "/add_new - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

@dp.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@dp.message(Command("search"))
async def cmd_search(message: Message):
    args = message.text.split(maxsplit=2)
    print(args)
    if len(args) < 3:
        return await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID –¥–ª—è –ø–æ–∏—Å–∫–∞")
    
    item_type = args[1].strip()
    search_term = args[2].strip()
    
    # –ü–æ–∏—Å–∫ –ø–æ ID
    if search_term.isdigit():
        item_id = int(search_term)
        item = db.get_by_id(item_type, item_id)
        if not item:
            return await message.answer("üîé –ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
        response = format_item_info(item['item_type'], item)
        db.log_action(
            user_id=message.from_user.id,
            action="SEARCH",
            item_type=item['item_type'],
            item_id=item_id
        )
        return await message.answer(response)
    
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    results = db.search_by_name(search_term)
    if not results:
        return await message.answer("üîé –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    response = ["üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:"]
    for item in results:
        response.append(
            f"{item['item_type']} ID{item['id']}: "
            f"{item['–Ω–∞–∑–≤–∞–Ω–∏–µ']} ({item['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']} —à—Ç)"
        )
    
    db.log_action(
        user_id=message.from_user.id,
        action="SEARCH",
        item_type="ALL",
        item_id=0,
        details=f"–ü–æ–∏—Å–∫: {search_term}"
    )
    await message.answer("\n".join(response))

@dp.message(Command("add", "give"))
async def cmd_modify(message: Message):
    try:
        command, item_type, item_id, qty = message.text.split()
        item_id = int(item_id)
        qty = int(qty)
        
        if command == "/give":
            qty = -abs(qty)

        if item_type not in ["–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"]:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø")
            
        if db.update_quantity(item_type, item_id, qty):
            item = db.get_by_id(item_type, item_id)
            response = (
                "‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"{format_item_info(item_type, item)}"
            )
            action = "ADD" if qty > 0 else "GIVE"
            db.log_action(
                user_id=message.from_user.id,
                action=action,
                item_type=item_type,
                item_id=item_id,
                details=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ {qty}"
            )
        else:
            response = "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            
        await message.answer(response)
        
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/add –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ 123 10\n"
            "/give –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã 456 5"
        )

@dp.message(Command("add_new"))
async def cmd_add_new(message: Message, state: FSMContext):
    await message.answer(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏:",
        reply_markup=create_type_keyboard()
    )
    await state.set_state(NewItemStates.CHOOSE_TYPE)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM ---
@dp.callback_query(NewItemStates.CHOOSE_TYPE, F.data.in_(["equipment", "component"]))
async def process_type(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    item_type = "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ" if callback.data == "equipment" else "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"
    
    await state.update_data(item_type=item_type)
    
    if item_type == "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ":
        await callback.message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —á–µ—Ä—Ç—É (|):\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ | –¢–∏–ø | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–°—Ç–∞–Ω–æ–∫ –ß–ü–£ | –ú–µ—Ç–∞–ª–ª–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ | 5"
        )
        await state.set_state(NewItemStates.INPUT_EQUIPMENT)
    else:
        await callback.message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —á–µ—Ä—Ç—É (|):\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –†–∞–∑–º–µ—Ä | –¢–∏–ø\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "–ë–æ–ª—Ç –ú12 | 100 | 12x50 –º–º | –ö—Ä–µ–ø–µ–∂"
        )
        await state.set_state(NewItemStates.INPUT_COMPONENT)

@dp.message(NewItemStates.INPUT_EQUIPMENT)
async def process_equipment(message: Message, state: FSMContext):
    try:
        parts = [p.strip() for p in message.text.split("|")]
        if len(parts) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
        name, eq_type, qty = parts
        item_id = db.add_new_equipment(name, eq_type, int(qty))
        
        await message.answer(
            f"‚úÖ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
            f"ID: {item_id}"
        )
        db.log_action(
            user_id=message.from_user.id,
            action="ADD_NEW",
            item_type="–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            item_id=item_id
        )
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

@dp.message(NewItemStates.INPUT_COMPONENT)
async def process_component(message: Message, state: FSMContext):
    try:
        parts = [p.strip() for p in message.text.split("|")]
        if len(parts) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
        name, qty, size, comp_type = parts
        item_id = db.add_new_component(name, int(qty), size, comp_type)
        
        await message.answer(
            f"‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"ID: {item_id}"
        )
        db.log_action(
            user_id=message.from_user.id,
            action="ADD_NEW",
            item_type="–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
            item_id=item_id
        )
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())